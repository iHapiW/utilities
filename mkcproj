#!/bin/python3

import sys
import os
import colorama
from termcolor import colored

# CMakeLists.txt For All Projects
cmake_file_content = """cmake_minimum_required(VERSION 3.10)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

project({a} VERSION 1.0.0 LANGUAGES C)

file(GLOB SRC 
    "${{CMAKE_CURRENT_SOURCE_DIR}}/src/*.c"
    "${{CMAKE_CURRENT_SOURCE_DIR}}/include/*.h"
)

{b}

target_include_directories(${{PROJECT_NAME}} PRIVATE "${{CMAKE_CURRENT_SOURCE_DIR}}/include")
"""

cmake_flags = """{
    "CMAKE_BUILD_TYPE" : "Debug"
}"""

# Src file for Exe Projects
exe_main = """#include <stdio.h>

int main(int argc, char* argv[]) 
{
    printf("Hello World\\n");
    return 0;
}
"""

# Src File for lib Projects
lib_main = "#include \"{0}.h\""

# Header File for Lib Projects
lib_header = """#ifndef {0}_H
#define {0}_H

#endif // {0}_H"""

# Help Message
help = """Usage: {0} {{PROJECT_NAME}}  {{PROJECT_TYPE}}

Project Types:
    exe - Executable File (.exe)
    libstatic - Static Library (.a || .lib)
    libdynamic - Dynamic Library (Shared Library) (.dll || .so)"""

# Helper Funcitons

def print_err(text : str) -> None:
    sys.stderr.write("[")
    sys.stderr.write(colored("-", "red"));
    sys.stderr.write("]")
    sys.stderr.write(" {0}\n".format(text));

def print_success(text : str) -> None:
    sys.stderr.write("[")
    sys.stderr.write(colored("+", "green"));
    sys.stderr.write("]")
    sys.stderr.write(" {0}\n".format(text));

def cmake_config(project_name : str, project_type : str) -> str:
    if project_type == "exe":
        return cmake_file_content.format(a=project_name, b="add_executable(${PROJECT_NAME} ${SRC})")
    elif project_type == "libstatic":
        return cmake_file_content.format(a=project_name, b="add_library(${PROJECT_NAME} STATIC ${SRC})")
    elif project_type == "libdynamic":
        return cmake_file_content.format(a=project_name, b="add_library(${PROJECT_NAME} SHARED ${SRC})")
    else:
        return ""

# Enable Colors
colorama.init()

def main():

    # Small Gap between Command and Output
    print()

    argc = len(sys.argv)

    this_file = sys.argv[0]

    # Print Help if Needed
    if argc > 2 and (sys.argv[1] == "--help" or sys.argv[1] == "-h"):
        print(help.format(this_file));
        sys.exit(-1);

    # Check if we have Enough Argument
    if argc < 3:
        print_err("Not Enough Argument")
        print(help.format(this_file));
        sys.exit(-1);

    project_name = sys.argv[1];
    project_type = sys.argv[2];

    # Get Project Path
    executed_path = os.getcwd()
    project_dir = f"{executed_path}/{sys.argv[1]}"

    # Check if Directory Exists
    if os.path.exists(project_dir):
        print_err("Directory with Project Name Exists!");
        sys.exit(-1);

    # Check Project Type
    if project_type not in ["exe", "libstatic", "libdynamic"]:
        print_err("Invalid Project Type!")
        print(help.format(this_file))
        sys.exit(-1);

    os.mkdir(project_dir)

    if project_type == "exe":
        with open(f"{project_dir}/CMakeLists.txt", "w") as cmakelists:
            cmakelists.write(cmake_config(project_name, project_type))
        with open(f"{project_dir}/CMakeOptions.json", "w") as cmakeoptions:
            cmakeoptions.write(cmake_flags);
        os.mkdir(f"{project_dir}/src")
        os.mkdir(f"{project_dir}/include")
        with open(f"{project_dir}/src/main.c", "w") as main:
            main.write(exe_main)
        print_success(f"Successfully Made {project_name} Project")

    elif project_type == "libstatic" or project_type == "libdynamic":
        with open(f"{project_dir}/CMakeLists.txt", "w") as cmakelists:
            cmakelists.write(cmake_config(project_name, project_type))
        with open(f"{project_dir}/CMakeOptions.json", "w") as cmakeoptions:
            cmakeoptions.write(cmake_flags);
        os.mkdir(f"{project_dir}/src")
        os.mkdir(f"{project_dir}/include")
        with open(f"{project_dir}/src/{project_name}.c", "w") as src:
            src.write(lib_main.format(project_name))
        with open(f"{project_dir}/include/{project_name}.h", "w") as header:
            header.write(lib_header.format(project_name.upper()))

        print_success(f"Successfully Made {project_name} Project")

if __name__ == "__main__":
    main()
