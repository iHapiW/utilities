#!/usr/bin/env python3

from Cryptodome.Cipher import AES
from Cryptodome.Random import get_random_bytes
import hashlib
import sys
import colorama
from termcolor import colored

# Help Message
help = """Usage: {0} Operation FilePath Password

Operations:
    lock - to encrypt the file using password provided
    unlock - to decrypt the file using password provided"""

# Beautiful Print Functions
def print_err(text : str) -> None:
    sys.stderr.write("[")
    sys.stderr.write(colored("-", "red"));
    sys.stderr.write("]")
    sys.stderr.write(" {0}\n".format(text));

def print_success(text : str) -> None:
    sys.stderr.write("[")
    sys.stderr.write(colored("+", "green"));
    sys.stderr.write("]")
    sys.stderr.write(" {0}\n".format(text));

# Encryption And Decryption Algorithms
def encrypt_data(key: bytes, data: bytes) -> bytes:
    nonce = get_random_bytes(12)
    cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
    digest, tag = cipher.encrypt_and_digest(data)
    encrypted = nonce + tag + digest
    return encrypted

def decrypt_data(key: bytes, encrypted: bytes) -> bytes:
    cipher = AES.new(key, AES.MODE_GCM, nonce=encrypted[:12])
    data = cipher.decrypt_and_verify(encrypted[28:], encrypted[12:28])
    return data

# Execution Flow
def main():
    colorama.init()

    # Check for sufficient arguments and the pattern
    if ( len(sys.argv) != 4 ) or (sys.argv[1] != "lock" and sys.argv[1] != "unlock"):
        print_err(help.format(sys.argv[0]))
        return

    # Perform the operation and store the `result`
    result = b""
    try:
        with open(sys.argv[2], 'rb') as f:
            SHA256 = hashlib.sha256()
            SHA256.update(sys.argv[3].encode());
            key = SHA256.digest()
            data = f.read()
            if(sys.argv[1] == "lock"):
                result = encrypt_data(key, data)
            elif(sys.argv[1] == "unlock"):
                result = decrypt_data(key, data)
    except FileNotFoundError:
        print_err("File Doesn't Exist!");
        return
    except PermissionError:
        print_err("Insufficient permission to read file!")
        return
    except ValueError as e:
        if e.args[0] == "MAC check failed" or e.args[0] == "Nonce cannot be empty":
            print_err("Error Happened while decryption!")
            print_err("Are you sure this data is encrypted especially with this password!?")
        else:
            print_err(f"Unkown Error Happened!: {e}")
        return
    except Exception as e:
        print_err(f"Unkown Error Happened!: {e}")
        return

    # Try writing it back to the original file
    try:
        with open(sys.argv[2], 'wb') as f:
            f.write(result)
    except PermissionError:
        print_err("Insufficient permission to write file!")
    except Exception as e:
        print_err(f"Unknown Error Occured: {e}")

if __name__ == "__main__":
    main()
