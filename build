#!/bin/python3
import sys
import json
import os

import colorama
from termcolor import colored


def print_err(text: str) -> None:
    sys.stderr.write("\n[")
    sys.stderr.write(colored("-", "red"))
    sys.stderr.write("]")
    sys.stderr.write(" {0}\n".format(text))


def print_success(text: str) -> None:
    sys.stderr.write("[")
    sys.stderr.write(colored("+", "green"))
    sys.stderr.write("]")
    sys.stderr.write(" {0}\n".format(text))


colorama.init()


def configure(project_dir, has_cmake_presets, preset):
    response = 0
    if has_cmake_presets:
        response = os.system(
            f"cmake {project_dir} --preset={preset} > /dev/null"
        )
    else:
        response = os.system(
            f"cmake -B{project_dir}/build {project_dir} > /dev/null"
        )

    if response != 0:
        print_err("CMake Raised Error")
        sys.exit(-1)


def build(project_dir, has_cmake_presets, preset):
    build_dir = "build"

    if has_cmake_presets:

        # used to resolve binaryDir in CMakePresets
        os.environ["sourceDir"] = os.getcwd()

        with open(f"{project_dir}/CMakePresets.json") as cmakepresets:
            data = json.loads(cmakepresets.read())
            presets = data["configurePresets"]
            for p in presets:
                if p["name"] == preset:
                    build_dir = p["binaryDir"]

    response = os.system(f"cmake --build {build_dir} > /dev/null")
    if response != 0:
        print_err("Builder Raised Error")
        sys.exit(-1)


def main():

    preset = "default"
    if len(sys.argv) > 1:
        preset = sys.argv[1]

    project_dir = os.getcwd()
    print_success("Building Project...")

    has_cmake_presets = os.path.exists(f"{project_dir}/CMakePresets.json")
    configure(project_dir, has_cmake_presets, preset)
    build(project_dir, has_cmake_presets, preset)

    print_success("Built !")


if __name__ == "__main__":
    main()
